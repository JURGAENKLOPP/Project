#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Pin definitions
const int TRIG_PIN = 2;        // Ultrasonic Sensor Trigger
const int ECHO_PIN = 3;        // Ultrasonic Sensor Echo
const int IN1 = 4;             // Motor IN1
const int IN2 = 5;             // Motor IN2
const int ENA = 6;             // Motor ENA (PWM for Motor Speed)
const int IN3 = 8;             // Motor IN3
const int IN4 = 7;             // Motor IN4
const int ENB = 9;             // Motor ENB (PWM for Motor Speed)
const int FSR_PIN = A0;        // FSR analog pin
const int RED_LED1 = A1;       // Red LED 1 on A1
const int RED_LED2 = A2;       // Red LED 2 on A2
const int RED_LED3 = A3;       // Red LED 3 on A3

// RGB LED Pins (First RGB on pin 13, Second RGB on pin 12)
const int RGB1_PIN = 13;       // RGB LED 1 control pin (all colors)
const int RGB2_PIN = 12;       // RGB LED 2 control pin (all colors)

// Create an LCD object (address 0x27, 16 columns, and 2 rows)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Variables for non-blocking timing
unsigned long previousMillisRedLED = 0;
unsigned long previousMillisRGB = 0;
const long intervalRedLED = 500;  // Interval for blinking red LEDs (0.5 seconds)
const long intervalRGB = 200;     // Interval for blinking RGB LEDs (0.2 seconds)
bool redLEDState = LOW;
bool rgbState = LOW;

void setup() {
  Serial.begin(9600);

  // Initialize the LCD
  lcd.init();
  lcd.backlight();

  // Set pin modes
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(FSR_PIN, INPUT);
  pinMode(RED_LED1, OUTPUT); // Set LED 1 as output
  pinMode(RED_LED2, OUTPUT); // Set LED 2 as output
  pinMode(RED_LED3, OUTPUT); // Set LED 3 as output

  // Set RGB LED pins as outputs
  pinMode(RGB1_PIN, OUTPUT); // First RGB LED on pin 13
  pinMode(RGB2_PIN, OUTPUT); // Second RGB LED on pin 12

  // Ensure all LEDs are off at the start
  digitalWrite(RED_LED1, LOW);
  digitalWrite(RED_LED2, LOW);
  digitalWrite(RED_LED3, LOW);
  digitalWrite(RGB1_PIN, LOW);
  digitalWrite(RGB2_PIN, LOW);

  delay(2000);  // Wait 2 seconds before starting
  lcd.clear();  // Clear the screen
}

void loop() {
  // Variables to store distance and weight
  long duration, distance;
  int fsrValue = analogRead(FSR_PIN);

  // Map the FSR reading to weight (assuming a max of 1000 grams)
  float weight = map(fsrValue, 0, 1023, 0, 1000); // Adjust mapping if needed

  // Trigger the ultrasonic sensor
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Read the echo and calculate distance in cm
  duration = pulseIn(ECHO_PIN, HIGH, 30000); // Timeout after 30ms
  distance = (duration * 0.034) / 2;

  // Print distance and weight to Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, Weight: ");
  Serial.print(weight);
  Serial.println(" g");

  // Get the current time
  unsigned long currentMillis = millis();

  // Check weight limit condition
  if (weight > 250) {
    // Stop motors and display warning message on LCD if weight exceeds 250 grams
    Serial.println("Warning: Maximum load limit exceeded!");

    // Stop both motor pairs
    stopMotors();

    // Blink red LEDs every 0.5 seconds
    blinkRedLEDs(currentMillis);

    // Turn off RGB LEDs if blinking
    turnOffRGB();

    // Display warning message on LCD
    lcd.setCursor(0, 0);
    lcd.print("!Warning Max Load!");
    lcd.setCursor(0, 1);
    lcd.print("Limit Exceeded!  ");

  } else if (distance < 20 && distance > 0) {
    // Stop the motors if an obstacle is detected within 20 cm
    Serial.println("Object detected! Stopping.");

    // Stop both motor pairs
    stopMotors();

    // Blink red LEDs every 0.5 seconds
    blinkRedLEDs(currentMillis);

    // Blink RGB LEDs every 0.2 seconds
    blinkRGBWhite(currentMillis);

    // Display "Engine stopped" and weight on LCD
    lcd.setCursor(0, 0);
    lcd.print("Engine stopped   ");
    lcd.setCursor(0, 1);
    lcd.print("Weight: ");
    lcd.print(weight);
    lcd.print(" g    "); // Clear any extra characters

  } else {
    // Move forward at full speed if weight is within limit and path is clear
    Serial.println("Path clear. Moving forward.");

    // Run motors
    runMotors();

    // Ensure all LEDs are turned off
    digitalWrite(RED_LED1, LOW);
    digitalWrite(RED_LED2, LOW);
    digitalWrite(RED_LED3, LOW);
    turnOffRGB();

    // Display distance and weight on LCD
    lcd.setCursor(0, 0);
    lcd.print("Dist: ");
    lcd.print(distance);
    lcd.print(" cm    "); // Clear any extra characters

    lcd.setCursor(0, 1);
    lcd.print("Weight: ");
    lcd.print(weight);
    lcd.print(" g    "); // Clear any extra characters
  }

  // Small delay to prevent overwhelming the serial output
  delay(50);
}

// Function to stop motors
void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0); // Stop motor 1

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0); // Stop motor 2
}

// Function to run motors forward
void runMotors() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 255); // Full speed for motor 1

  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 255); // Full speed for motor 2
}

// Function to blink red LEDs on A1, A2, A3 every 0.5 seconds without blocking
void blinkRedLEDs(unsigned long currentMillis) {
  if (currentMillis - previousMillisRedLED >= intervalRedLED) {
    previousMillisRedLED = currentMillis;

    // Toggle the red LED state
    redLEDState = !redLEDState;

    // Update the red LEDs
    digitalWrite(RED_LED1, redLEDState);
    digitalWrite(RED_LED2, redLEDState);
    digitalWrite(RED_LED3, redLEDState);
  }
}

// Function to blink RGB LEDs in white every 0.2 seconds without blocking
void blinkRGBWhite(unsigned long currentMillis) {
  if (currentMillis - previousMillisRGB >= intervalRGB) {
    previousMillisRGB = currentMillis;

    // Toggle the RGB LED state
    rgbState = !rgbState;

    // Update the RGB LEDs
    digitalWrite(RGB1_PIN, rgbState); // Blink the first RGB LED (white) on pin 13
    digitalWrite(RGB2_PIN, rgbState); // Blink the second RGB LED (white) on pin 12
  }
}

// Function to turn off both RGB LEDs
void turnOffRGB() {
  rgbState = LOW;
  digitalWrite(RGB1_PIN, LOW); // Turn off first RGB LED
  digitalWrite(RGB2_PIN, LOW); // Turn off second RGB LED
}
